cmdhistory=["(as-and-bs \\"1 2 5 8\\")" "(+ 1 1)" "(ns clojushlab.core\\r\\n  (\:require [instaparse.core \:as insta]))\\r\\n\\r\\n(def vec-parser\\r\\n  (insta/parser\\r\\n    \\"instrs \= (expr? <';'>* <space>?)*\\r\\n     expr \= (<space>? operation <space>?)*\\r\\n     operation \= matrix? <space>? op <space>? matrix?\\r\\n     (* operateurs *)\\r\\n     op \= '*' | '+' | '-'\\r\\n     (* Les variables *)\\r\\n     matrix \= <'m('> <space>? matrow* <space>? <')'>\\r\\n     (* Represente une ligne de la matrice *)\\r\\n     matrow \= <'['> <space>? (number <space>)*  <']'>\\r\\n     (* Les espaces *)\\r\\n     <space> \= \#'[\\\\\\\\s]*'\\r\\n     (* Les constantes de 0 \u00E0 9 *)\\r\\n     number \= \#'[0-9]+'\\"\\r\\n  ))\\r\\n\\r\\n(vec-parser \\"m([0 0 0 0 0 0]) + m([1 2 3 4 5]) - m([1 2 3 5 8]) * m([5454 151 484 4]) * m([5454 151 484 4]) ; m([1 2 5 8 7]) + m([1]);\\")" "(ns clojushlab.core\\r\\n  (\:require [instaparse.core \:as insta]))\\r\\n\\r\\n(def vec-parser\\r\\n  (insta/parser\\r\\n    \\"instrs \= ((assign? | expr?) <';'> <space>?)*\\r\\n     \\r\\n     (* expression *)\\r\\n     expr \= (<space>? (assign | operation) <space>?)*\\r\\n     \\r\\n     (* Affectation *)\\r\\n     assign \= var <space>? <'\='> <space>? (operation | number)  \\r\\n     \\r\\n     (* variables *)\\r\\n     var \= \#'[a-zA-Z0-9]+'\\r\\n     \\r\\n     (* operations *)\\r\\n     operation \= matrix <space>? op <space>? matrix\\r\\n\\r\\n     (* operateurs *)\\r\\n     op \= '*' | '+' | '-'\\r\\n\\r\\n     (* matrices *)\\r\\n     matrix \= <'m('> <space>? matrow* <space>? <')'>\\r\\n\\r\\n     (* Represente une ligne de la matrice *)\\r\\n     matrow \= <'['> <space>? (number <space>)*  <']'>\\r\\n\\r\\n     (* Les espaces *)\\r\\n     <space> \= \#'[\\\\\\\\s]*'\\r\\n\\r\\n     (* Les constantes de 0 \u00E0 9 *)\\r\\n     number \= \#'[0-9]+'\\"\\r\\n  ))\\r\\n\\r\\n(vec-parser \\"m([5454 151 484 4]) * m([5454 151 484 4]); v \= m([1 2 5 8 7]) + m([1]);\\")" "(defn all-in-one []\\r\\n  (let [parser (insta/parser \\"expr \= number | operation | varget | assig\\r\\n    assig \= varname space? <'\='> space? elt\\r\\n    <wpoperation> \= <'('> elt space operator space elt <')'>\\r\\n    <npoperation> \= elt space operator space elt\\r\\n    operation \= wpoperation | npoperation\\r\\n    <elt> \= number | operation | varget\\r\\n    operator \= ('*' | '/') / ('+' | '-')\\r\\n    <space> \= <\#'[ ]+'>\\r\\n    number \= \#'[0-9]+'\\r\\n    varget \= varname\\r\\n    varname \= \#'[a-zA-Z]\\\\\\\\w*'\\")]\\r\\n    (reduce {}\\r\\n            (fn [env instr]\\r\\n              (let [transform-options {\:expr \#(if (map? %) % env)\\r\\n                                       \:assig \#(assoc env %1 %2)\\r\\n                                       \:operator {\\"+\\" +, \\"-\\" -, \\"*\\" *, \\"/\\" /}\\r\\n                                       \:number \#(Long/parseLong %)\\r\\n                                       \:operation (fn [a op b] (op a b))\\r\\n                                       \:varname keyword\\r\\n                                       \:varget \#(% env)}\\r\\n                    next-env (->> instr parser (insta/transform transform-options))]\\r\\n                (do (prn next-env) next-env)))\\r\\n            (-> *in* java.io.BufferedReader. line-seq))))" "(all-in-one \\"1 + 2-4 * 6 + (6+5)\\")" "(all-in-one \\"1 + 2-4 * 6\\")" "(all-in-one \\"v\=1 + 2-4 * 6 + (6+5)\\")" "(def arithmetic\\r\\n  (insta/parser\\r\\n   \\"<expr> \= additive-expr | multiplicative-expr | number\\r\\n    additive-expr \= expr (('+' | '-' ) expr)\\r\\n    multiplicative-expr \= number ( ('*' | '/') (multiplicative-expr|number) )\\r\\n    number \= \#'-?[0-9]+'\\"))" "(arithmetic \\"1*2 + 5 - (5 * 8)\\")" "(arithmetic \\"1*2 + 5 - 5 * 8\\")" "(arithmetic \\"1 + 2 + 5 - 5 + 8\\")" "(arithmetic \\"1*2+5-(5 * 8)\\")" "(arithmetic \\"1*2 +5-5 * 8\\")" "(arithmetic \\"1*2+5-5*8\\")" "(* - 4)"]
eclipse.preferences.version=1
